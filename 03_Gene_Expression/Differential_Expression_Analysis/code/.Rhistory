str(founders.mslrp)
rownames(founders.mslrp)
rownames(founders.mslrp) <- founders.mslrp$strain
rownames(founders.mslrp) <- founders.mslrp$strain
founders.mslrp.adj <- apply(founders.mslrp,2, function(x) {p.adjust(x,method ="holm")})
View(founders.mslrp.adj)
founders.mslrp.adj <- as.data.frame(apply(founders.mslrp,2, function(x) {p.adjust(x,method ="holm")}) )
founders.mslrp.adj <- as.data.frame(apply(founders.mslrp,2, function(x) {p.adjust(x,method ="holm")}) )
founders.mslrp.adj$strain <- founders.mslrp$strain
View(founders.mslrp.adj)
founders.mslrp.adj.M <- melt(founders.mslrp.adj)
.head(.)
head(founders.mslrp.adj.M)
cv.ratio
cv.ratio.M <- melt(cv.ratio)
res.do <- DO.all[do.ids,]
cv.do.f <- res.do[,3]/res.all[,3]
res.all$cv_ratio <- cv.do.f
cv.ratio <- dcast(res.all,  strain ~ variable, value.var = "cv_ratio", fun.aggregate = mean)
cv.ratio.M <- melt(cv.ratio)
write.csv(file="All_DO_Resutls_cv_ratio_09052018.csv",cv.ratio.M, row.names = FALSE, quote = FALSE)
rownames(founders.mslrp) <- founders.mslrp$strain
founders.mslrp.adj <- as.data.frame(apply(founders.mslrp,2, function(x) {p.adjust(x,method ="holm")}) )
founders.mslrp.adj$strain <- founders.mslrp$strain
founders.mslrp.adj.M <- melt(founders.mslrp.adj.M)
write.csv(file="All_DO_Resutls_mslrp_adj_holm_09052018.csv",founders.mslrp.adj.M, row.names = FALSE, quote = FALSE)
founders.mslrp.adj <- as.data.frame(apply(founders.mslrp,2, function(x) {p.adjust(x,method = "fdr")}))
founders.mslrp.adj$strain <- founders.mslrp$strain
founders.mslrp.adj.M <- melt(founders.mslrp.adj.M)
write.csv(file="All_DO_Resutls_mslrp_adj_fdr_09052018.csv",founders.mslrp.adj.M, row.names = FALSE, quote = FALSE)
founders.mslrp.M <- melt(founders.mslrp)
head(founders.mslrp)
head(founders.mslrp.M)
head(founders.mslrp.adj)
str(founders.mslrp)
founders.mslrp.M <- melt(founders.mslrp, id.vars = "strain")
head(founders.mslrp.M)
founders.mslrp.M$value <- as.numeric(founders.mslrp.M$value)
founders.mslrp.M$adjP <- p.adjust(founders.mslrp.M$value)
founders.mslrp.M$adjP <- p.adjust(founders.mslrp.M$value)
write.csv(file="All_DO_Resutls_mslrp_adj_09052018.csv",founders.mslrp.M, row.names = FALSE, quote = FALSE)
View(founders.mslrp.M)
str(founders.mslrp.M)
hist(founders.mslrp.M$value)
founders.mslrp.M$adjP <- p.adjust(founders.mslrp.M$value,method = "holm")
write.csv(file="All_DO_Resutls_mslrp_holm_09052018.csv",founders.mslrp.M, row.names = FALSE, quote = FALSE)
founders.mslrp.M$value
founders.mslrp.M$adjP <- p.adjust(founders.mslrp.M$value,method = "holm")
founders.mslrp.M$adjP
min(founders.mslrp.M$adjP)
min(founders.mslrp.M$adjP, na.rm = TRUE)
do.ids <- which(DO.all$strain == "DO")
res.all <- DO.all[-do.ids,]
founders.mslrp <- dcast(res.all,  strain ~ variable, value.var = "mslr.p", fun.aggregate = max)
founders.mslrp.M <- melt(founders.mslrp, id.vars = "strain")
write.csv(file="All_DO_Resutls_mslrp_unadj_09052018.csv",founders.mslrp.M, row.names = FALSE, quote = FALSE)
founders.mslrp.M$value <- as.numeric(founders.mslrp.M$value)
founders.mslrp.M$adjP <- p.adjust(founders.mslrp.M$value)
founders.mslrp.M$adjP.holm <- p.adjust(founders.mslrp.M$value,method = "holm")
View(founders.mslrp.M)
?p.adjust
founders.mslrp.M$adjP <- p.adjust(founders.mslrp.M$value, method = "BH")
founders.mslrp.M$adjP.holm <- p.adjust(founders.mslrp.M$value,method = "holm")
View(founders.mslrp.M)
founders.mslrp.M$adjP <- p.adjust(founders.mslrp.M$value, method = "fdr")
founders.mslrp.M$adjP.holm <- p.adjust(founders.mslrp.M$value,method = "holm")
write.csv(file="09052018/results/pw/All_DO_Resutls_mslrp_adj_09052018.csv",founders.mslrp.M, row.names = FALSE, quote = FALSE)
sign.data <- read_excel("09052018/results/pw/pairwise_summary_signtest.xlsx", sheet=4)
sign.data
x <- sign.data$`less vaiable in I`
y <- sign.data$`more variable in I`
x
y
library(DescTools)
install.packages(DescTools)
install.packages("DescTools")
library("DescTools")
SignTest(x,y)
SignTest(x,y, mu = 4)
SignTest(x,y, mu = 0)
?SignTest
x <- c(1.83,  0.50,  1.62,  2.48, 1.68, 1.88, 1.55, 3.06, 1.30)
y <- c(0.878, 0.647, 0.598, 2.05, 1.06, 1.29, 1.06, 3.14, 1.29)
SignTest(x, y)
wilcox.test(x, y, paired = TRUE)
wilcox.test(x,y, paired = TRUE)
install.packages("BSDA")
library(BSDA)
SIGN.test(x,y)
x <- sign.data$`less vaiable in I`
y <- sign.data$`more variable in I`
SignTest(x, y)
SIGN.test(x,y)
sign.data <- read_excel("09052018/results/pw/pairwise_summary_signtest.xlsx", sheet=5)
x <- sign.data$`less vaiable in I`
y <- sign.data$`more variable in I`
library("DescTools")
library("BSDA")
SignTest(x, y)
SIGN.test(x,y)
sign.data <- read_excel("09052018/results/pw/pairwise_summary_signtest.xlsx", sheet=5)
x <- sign.data$`less vaiable in I`
y <- sign.data$`more variable in I`
library("DescTools")
library("BSDA")
SignTest(x, y)
SIGN.test(x,y)
SignTest(x, y, alternative = "less")
SignTest(x, y, alternative = "greater")
SignTest(x, y)
sign.data <- read_excel("09052018/results/pw/pairwise_summary_signtest.xlsx", sheet=5)
x <- sign.data$`prop less vaiable in Inbreds`
y <- sign.data$`prop more variable in Inbreds`
library("DescTools")
library("BSDA")
SignTest(x, y)
SIGN.test(x,y)
z <- x-y
hist(z)
plot(density(z))
hist(z)
sign.data <- read_excel("09052018/results/pw/pairwise_summary_signtest_dummy.xlsx", sheet=5)
x <- sign.data$`prop less vaiable in Inbreds`
y <- sign.data$`prop more variable in Inbreds`
library("DescTools")
library("BSDA")
SignTest(x, y)
sign.data <- read_excel("09052018/results/pw/pairwise_summary_signtest.xlsx", sheet=5)
x <- sign.data$`prop less vaiable in Inbreds`
y <- sign.data$`prop more variable in Inbreds`
library("DescTools")
library("BSDA")
SignTest(x, y)
setwd("/Users/vmp/CS-SA/CSNA/ShortCourse_2018/03_Gene_Expression/Differential_Expression_Analysis/code")
files <- list.files("../data/genes/", pattern = "read_counts")
files
files <- list.files("../data/genes/", pattern = "read_counts", full.names = TRUE)
files
files <- list.files("../data/genes", pattern = "read_counts", full.names = TRUE)
i <- 1
curr <- read.table(files[i],header = T)
dim(curr)
head(curr)
i<-2
hp.all <- read.table(files[1],header = T)
hp.all <- merge.data.frame(hp.all, curr, by.x = "locus", by.y="locus")
head(hp.all)
files[1]
strsplit(files[1],split = "/")
strsplit(strsplit(files[1],split = "/")[[1]][4],split = "_")[[1]][1]
#generate counts table
files <- list.files("../data/genes", pattern = "read_counts", full.names = TRUE)
hp.all <- read.table(files[1],header = T)
hp.all <- hp.all[,-2]
colnames(hp.all)[2] <- strsplit(strsplit(files[1],split = "/")[[1]][4],split = "_")[[1]][1]
for (i in 2:length(files)) {
curr <- read.table(files[i],header = T)
curr <- curr[,-2]
colnames(curr)[2] <- strsplit(strsplit(files[i],split = "/")[[1]][4],split = "_")[[1]][1]
hp.all <- merge.data.frame(hp.all, curr, by.x = "locus", by.y="locus")
}
dim(hp.all)
colnames(curr)
colnames(hp.all)
write.table(hp.all, file="../data/hp_founder_gex_counts.txt", row.names = FALSE, quote = FALSE)
?DESeqDataSetFromMatrix
??DESeqDataSetFromMatrix
countData <- read.table("../data/hp_founder_gex_counts.txt", header = TRUE)
dim(countData)
sampleSheet <- read.table("../data/SampleSheet_Chesler_Founders_Hippocampus_RNASeq.txt", header = TRUE)
colnames(countData)
sampleSheet <- read.table("../data/SampleSheet_Chesler_Founders_Hippocampus_RNASeq.txt", header = FALSE)
sampleSheet$V1
sampleSheet$V2
countData <- read.table("../data/hp_founder_gex_counts.txt", header = TRUE, as.is = TRUE)
colnames(countData)
countData <- read.table("../data/hp_founder_gex_counts.txt", header = TRUE, check.names = FALSE)
colnames(countData)
countData <- read.table("../data/hp_founder_gex_counts.txt", header = TRUE, check.names = FALSE)
sampleSheet <- read.table("../data/SampleSheet_Chesler_Founders_Hippocampus_RNASeq.txt", header = FALSE)
strains < sampleSheet$strain
head(sampleSheet)
sampleSheet <- read.table("../data/SampleSheet_Chesler_Founders_Hippocampus_RNASeq.txt", header = TRUE)
sampleSheet <- read.table("../data/SampleSheet_Chesler_Founders_Hippocampus_RNASeq.txt", header = TRUE)
strains < sampleSheet$strain
head(sampleSheet)
strains <- sampleSheet$strain
sex <- sampleSheet$sex
row.names(countData) <- countData$locus
countData <- countData[,-1]
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = sampleSheet,
design = ~ strains + sex)
library(DESeq2)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = sampleSheet,
design = ~ strains + sex)
design = ~ strains)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = sampleSheet,
design = ~ strains)
\head(sampleSheet)
head(sampleSheet)
View(countData)
countData <- round(countData)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = sampleSheet,
design = ~ strains + sex)
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = sampleSheet,
design = ~ strain + sex)
dds
install.packages("vsn")
BiocInstaller::biocLite("vsn")
library(vsn)
ntd <- normTransform(dds)
vsd <- vst(dds, blind=FALSE)
rld <- rlog(dds, blind=FALSE)
keep <- rowSums(counts(dds)) >= 10
dds <- dds[keep,]
dds
ntd <- normTransform(dds)
vsd <- vst(dds, blind=FALSE)
rld <- rlog(dds, blind=FALSE)
meanSdPlot(assay(ntd))
#mean-sd plot for VST transform
meanSdPlot(assay(vsd))
meanSdPlot(assay(ntd))
#mean-sd plot for VST transform
meanSdPlot(assay(vsd))
library("RColorBrewer")
library(RColorBrewer)
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$strain, vsd$sex, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
library(pheatmap)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
ddsMF <- dds
ddsMF$strain
ddsMF$sex
design(ddsMF) <- formula(~ strain + sex + strain:sex)
ddsMF <- DESeq(ddsMF)
resMF <- results(ddsMF)
head(resMF)
resultsNames(resMF)
resultsNames(ddsMF)
resMFType <- results(ddsMF,contrast=c("strain:sex", "strainA_J.sexM"))
resMFType <- results(ddsMF,contrast=c("strain_sex", "strainA_J.sexM"))
ddsMF$group <- factor(paste0(dds$strain, dds$sex))
design(ddsMF) <- ~ group
ddsMF <- DESeq(ddsMF)
resultsNames(ddsMF)
results(ddsMF, contrast=c("group", "F", "M"))
results(ddsMF, contrast=c("group", "A_JF", "A_JM"))
results(ddsMF, contrast=c("group", "A_JF", "B6F"))
?plotCounts
plotCounts(ddsMF, gene="ENSMUSG00000000001", intgroup = group)
plotCounts(ddsMF, gene="ENSMUSG00000000001", intgroup = "group")
plotCounts(ddsMF, gene="ENSMUSG00000000001", intgroup = c("strain","sex"))
d <- plotCounts(dds, gene=which.min(res$padj), intgroup = c("strain","sex"),
returnData=TRUE)
d <- plotCounts(ddsMF, gene="ENSMUSG00000108297", intgroup = c("strain","sex"),
returnData=TRUE)
ggplot(d, aes(x=condition, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
ggplot(d, aes(x=strain, y=count)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
d
ggplot(d, aes(x=strain, y=count, color=sex)) +
geom_line(aes(group = sex)) +
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
d %>%
group_by(sex, sstrain) %>%
summarise(strain_sex = mean(count)) -> tips2
library(tidyr)
d %>%
group_by(sex, sstrain) %>%
summarise(strain_sex = mean(count)) -> tips2
library(dplyr)
d %>%
group_by(sex, sstrain) %>%
summarise(strain_sex = mean(count)) -> tips2
d %>%
group_by(sex, strain) %>%
summarise(strain_sex = mean(count)) -> tips2
tips2 %>%
ggplot() +
aes(x = strain, y = strain_sex, color = sex) +
geom_line(aes(group = sex)) +
geom_point()
tips2 %>%
ggplot() +
aes(x = sex, y = strain_sex, color = strain) +
geom_line(aes(group = strain)) +
geom_point()
d %>%
group_by(sex, strain) %>%
summarise(n = length(temp)) %>%
summarise(strain_sex = mean(count)) %>%
summarise(strain_sex_sd = sd(count)) %>%
summarise(strain_sex_se = sd/sqrt(n)) -> tips2
d %>%
group_by(sex, strain) %>%
summarise(n = length(temp),
strain_sex = mean(count),
strain_sex_sd = sd(count),
strain_sex_se = sd/sqrt(n)) -> tips2
d %>%
group_by(sex, strain) %>%
summarise(n = length(d),
strain_sex = mean(count),
strain_sex_sd = sd(count),
strain_sex_se = sd/sqrt(n)) -> tips2
d
d %>%
group_by(sex, strain) %>%
summarise(n = 4,
strain_sex = mean(count),
strain_sex_sd = sd(count),
strain_sex_se = sd/sqrt(n)) -> tips2
d %>%
group_by(sex, strain) %>%
summarise(
strain_sex = mean(count),
strain_sex_sd = sd(count),
strain_sex_se = sd/2) -> tips2
data_summary <- function(data, varname, groupnames){
require(plyr)
summary_func <- function(x, col){
c(mean = mean(x[[col]], na.rm=TRUE),
sd = sd(x[[col]], na.rm=TRUE))
}
data_sum<-ddply(data, groupnames, .fun=summary_func,
varname)
data_sum <- rename(data_sum, c("mean" = varname))
return(data_sum)
}
d.summ <- data_summary(d, "count" , c("strain","sex"))
d
d.summ
d.summ %>%
ggplot() +
aes(x = sex, y = count, color = strain) +
geom_line(aes(group = strain)) +
geom_errorbar(aes(ymin=count-sd, ymax=count+sd), width=.2,
position=position_dodge(.9))
d.summ %>%
ggplot() +
aes(x = sex, y = count, color = strain) +
geom_line(aes(group = strain))
d.summ %>%
ggplot() +
aes(x = sex, y = count, color = strain) +
geom_line(aes(group = strain)) +
geom_point()
d.summ
d.summ %>%
ggplot() +
aes(x = sex, y = count, color = strain) +
geom_line(aes(group = strain)) +
geom_point() +
geom_errorbar(aes(ymin=count-sd, ymax=count+sd), width=.2,
position=position_dodge(.9))
resultsNames(ddsMF)
ddsMF <- dds
design(ddsMF) <- formula(~ strain + sex + strain:sex)
ddsMF <- DESeq(ddsMF)
resultsNames(ddsMF)
results(ddsMF, contrast=c("strain"))
results(ddsMF, name=c("strain_A_J_vs_129S1_SvImJ","strain_B6_vs_129S1_SvImJ"))
results(ddsMF, name=c("strain_A_J_vs_129S1_SvImJ"))
resAJ_129 <- results(ddsMF, name=c("strain_A_J_vs_129S1_SvImJ"))
length(resAJ_129$padj < 0.05)
length(which(resAJ_129$padj < 0.05))
plotMAhex(resAJ_129)
plotMA(resAJ_129)
library(marray)
install.packages("marray")
BiocInstaller::biocLite("marray")
library(marray)
plotMAhex(resAJ_129)
resAJ_129 <- results(ddsMF, name=c("strain"))
ddsMF <- dds
design(ddsMF) <- formula(~ strain + sex + strain:sex)
ddsMF <- DESeq(ddsMF, test = "LRT", reduced = ~ strain + sex)
res=results(ddsMF)
res
which(res$padj < 0.05)
res[which(res$padj < 0.05),]
d <- plotCounts(ddsMF, gene="ENSMUSG00000000282", intgroup=c("strain","sex"),
returnData=TRUE)
d
ggplot(d, aes(x=sex, y=count, color=strain)) +
geom_line(aes(group=strain))
geom_point(position=position_jitter(w=0.1,h=0)) +
scale_y_log10(breaks=c(25,100,400))
ggplot(d, aes(x=sex, y=count, color=strain)) +
geom_line(aes(group=strain))+
scale_y_log10(breaks=c(25,100,400))
d %>%
group_by(sex, strain) %>%
summarise(exp_mean = mean(count)) -> d.grp
d.grp
d
d %>%
group_by(sex, strain) %>%
summarise(exp_mean = mean(count)) -> d.grp
d
d.grp
d %>%
group_by(sex, strain) %>%
summarise(exp_mean = mean(count)) -> d.grp
ggplot(d.grp, aes(x=sex, y=exp_mean, color=strain) ) +
geom_line(aes(group=strain)) +
scale_y_log10(breaks=c(25,100,400))
library(dplyr)
d %>%
group_by(sex, strain) %>%
summarise(exp_mean = mean(count)) -> d.grp
d.grp
head(d)
d %>%
group_by(sex, strain) %>%
d %>%
group_by(sex, strain) %>%
summarise(exp_mean = mean(count))
str(d)
d %>%
group_by(sex,strain)
d %>%
group_by(sex,strain) %>%
summarise(exp_mean = mean(count))
d <- plotCounts(ddsMF, gene="ENSMUSG00000000282", intgroup=c("strain","sex"),
returnData=TRUE)
d %>%
group_by(sex) %>%
summarise(exp_mean = mean(count))
d %>%
group_by(strain) %>%
summarise(exp_mean = mean(count))
d %>%
dplyr::group_by(strain) %>%
summarise(mean_exp = mean(count))
mtcars <- mtcars   %>%
tbl_df() %>%
select(cyl , mpg, disp)
3
4
5
# with  group
mtcars %>%
group_by(cyl) %>%
summarise (mean_mpg = mean(mpg))
library(DESeq2)
dds <- makeExampleDESeqDataSet(n=1000, m=4)
dds <- estimateSizeFactors(dds)
sizeFactors(dds)
1 - (1-0.05)^20
1 - (1-0.05)^200
1 - (1-0.05)^20000
1 - (1-0.05)^7
library(DESeq2)
library(vsn)
library(RColorBrewer)
library(pheatmap)
library(ggplot2)
library(DT)
library(plyr)
library(org.Mm.eg.db)
library(topGO)
source("../code/utils.R")
countData <- read.table("../data/hp_founder_gex_counts.txt", header = TRUE, check.names = FALSE)
row.names(countData) <- countData$locus
countData <- countData[,-1]
countData <- round(countData)
sampleSheet <- read.table("../data/SampleSheet_Chesler_Founders_Hippocampus_RNASeq.txt", header = TRUE)
strains <- sampleSheet$strain
sex <- sampleSheet$sex
dds <- DESeqDataSetFromMatrix(countData = countData,
colData = sampleSheet,
design = ~ strain + sex)
keep <- rowSums(counts(dds)) >= 100
dds <- dds[keep,]
sampleDists <- dist(t(assay(vsd)))
ntd <- normTransform(dds)
vsd <- vst(dds, blind=FALSE)
#rld <- rlog(dds, blind=FALSE)
sampleDists <- dist(t(assay(vsd)))
sampleDistMatrix <- as.matrix(sampleDists)
rownames(sampleDistMatrix) <- paste(vsd$strain, vsd$sex, sep="-")
colnames(sampleDistMatrix) <- NULL
colors <- colorRampPalette( rev(brewer.pal(9, "Blues")) )(255)
pheatmap(sampleDistMatrix,
clustering_distance_rows=sampleDists,
clustering_distance_cols=sampleDists,
col=colors)
